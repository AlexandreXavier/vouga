<template>
  <v-container>
<!-- sandwich -->
    <v-navigation-drawer
      v-model="drawer"
      :clipped="$vuetify.breakpoint.lgAndUp"
      fixed
      app
      temporary
    >

    <!-- <v-list>
        <v-list-group
            v-for="item in items"
            :key="item.title"
            v-model="item.active"
            :prepend-icon="item.action"
            no-action
        >
            <template v-slot:activator>
                <v-list-tile>
                  <v-list-tile-content>
                    <v-list-tile-title>{{ item.title }}</v-list-tile-title>
                  </v-list-tile-content>
                </v-list-tile>
              </template>

                <v-list-tile
                    v-for="subItem in item.items"
                    :key="subItem.title"
                    @click="onOne"
                >
                    <v-list-tile-content>
                    <v-list-tile-title>{{ subItem.title }}</v-list-tile-title>
                    </v-list-tile-content>

                    <v-list-tile-action>
                    <v-icon>{{ subItem.action }}</v-icon>
                    </v-list-tile-action>
                </v-list-tile>
        </v-list-group>
    </v-list> -->



       <v-list dense>
        <template v-for="item in items">
          <v-layout
            v-if="item.heading"
            :key="item.heading"
            row
            align-center
          >
            <v-flex xs6>
              <v-subheader v-if="item.heading">
                {{ item.heading }}
              </v-subheader>
            </v-flex>
            <v-flex xs6 class="text-xs-center">
              <a href="#!" class="body-2 black--text">EDIT</a>
            </v-flex>
          </v-layout>
          <v-list-group
            v-else-if="item.children"
            :key="item.text"
            v-model="item.model"
            :prepend-icon="item.model ? item.icon : item['icon-alt']"
            append-icon=""
          >
            <template v-slot:activator>
              <v-list-tile>
                <v-list-tile-content>
                  <v-list-tile-title>
                    {{ item.text }}
                  </v-list-tile-title>
                </v-list-tile-content>
              </v-list-tile>
            </template>
            <v-list-tile
              v-for="(child, i) in item.children"
              :key="i"
              @click="onOne"
            >
              <v-list-tile-action v-if="child.icon">
                <v-icon>{{ child.icon }}</v-icon>
              </v-list-tile-action>
              <v-list-tile-content>
                <v-list-tile-title>
                  {{ child.text }}
                </v-list-tile-title>
              </v-list-tile-content>
            </v-list-tile>
          </v-list-group>
          <v-list-tile v-else :key="item.text" @click="onFour">
            <v-list-tile-action>
              <v-icon>{{ item.icon }}</v-icon>
            </v-list-tile-action>
            <v-list-tile-content>
              <v-list-tile-title>
                {{ item.text }}
              </v-list-tile-title>
            </v-list-tile-content>
          </v-list-tile>
        </template>
      </v-list>

    </v-navigation-drawer>


<!-- tab -->
    <v-toolbar
      :clipped-left="$vuetify.breakpoint.lgAndUp"
      color="primary"
      dark
      app
      fixed
      height="60px"
    >
      <v-toolbar-title style="width: 300px " class="ml-0 pl-3">
        <v-toolbar-side-icon @click.stop="drawer = !drawer"></v-toolbar-side-icon>
        <span class="hidden-sm-and-down">Barcos ORC(2019)</span>
      </v-toolbar-title>

      <v-spacer></v-spacer>

      <v-btn icon>
        <v-icon>notifications</v-icon>
      </v-btn>

      <v-list-tile
          @click="onSair">
          <v-list-tile-action>
            <v-icon>exit_to_app</v-icon>
          </v-list-tile-action>
        </v-list-tile>
    </v-toolbar>

<!--  btn + -->
    <v-btn v-if="userIsAuthenticated"
      fab
      bottom
      right
      color="pink"
      dark
      fixed
      @click="dialog = !dialog"
    >
      <v-icon>add</v-icon>
    </v-btn>


<!-- caixa criar barco -->
    <v-layout align-space-around justify-start column fill-height>
        <v-toolbar flat color="white"  v-if="userIsAuthenticated">
            <v-btn fab dark color="white">
                <v-avatar size="52" >
                    <v-img :src="profilePicUrl">
                    </v-img>
                </v-avatar>
            </v-btn>
            <v-toolbar-title>Criar Barco</v-toolbar-title>
            <v-divider
            class="mx-2"
            inset
            vertical
            ></v-divider>
            <v-spacer></v-spacer>
            <v-dialog v-model="dialog" max-width="500px">
                <template v-slot:activator="{ on }">
                    <v-btn color="primary" dark class="mb-2" v-on="on">+</v-btn>
                </template>
<v-card
      class="mx-auto"
      max-width="650"
    >
      <v-card-title class="title font-weight-regular justify-space-between">
        <span>{{ currentTitle }}</span>
        <v-avatar
          color="primary lighten-2"
          class="subheading white--text"
          size="24"
          v-text="step"
        ></v-avatar>
      </v-card-title>

      <v-window v-model="step">
        <v-window-item :value="1">
          <v-card-text>
            <v-form>
            <v-container>
            <v-layout row wrap justify-center>
                        <v-flex xs12 sm3>
                            <v-text-field v-model="editedItem.main" label="Vela Grande" suffix="m2" readonly>
                            </v-text-field>
                            <v-text-field v-model="editedItem.genoa" label="Genoa" suffix="m2"                    readonly>
                            </v-text-field>
                            <v-text-field v-model="editedItem.spinnaker" label="Balao" suffix="m2"                    readonly>
                            </v-text-field>
                        </v-flex>
                        <v-spacer></v-spacer>
                        <v-flex xs12 sm3>
                            <v-text-field v-model="editedItem.loa" label="Comp.Casco" suffix="m"                    readonly>
                            </v-text-field>

                            <v-text-field v-model="editedItem.draft" label="Alt.Casco" suffix="m"                    readonly>
                            </v-text-field>
                        </v-flex>
                        <v-spacer></v-spacer>
                        <v-flex xs12 sm3>

                            <v-text-field v-model="editedItem.spinnaker" label="Balao" suffix="m2"                    readonly>
                            </v-text-field>
                            <v-text-field v-model="editedItem.spinnaker" label="Balao" suffix="m2" v-mask="'a'" >
                            </v-text-field>
                        </v-flex>
                    </v-layout>
            </v-container>
            </v-form>
          </v-card-text>
        </v-window-item>

        <v-window-item :value="2">
          <v-card-text>
              <v-form>
            <v-container>
            <v-layout row wrap justify-center>
                        <v-flex xs12 sm3>
                            <v-text-field v-model="editedItem.gph" label="Rating"
                                suffix="m2"
                                readonly
                                return-masked-value
                                mask="##.##">
                            </v-text-field>
                            <v-text-field v-model="editedItem.genoa" label="Genoa" suffix="m2"                    readonly>
                            </v-text-field>
                            <v-text-field v-model="editedItem.spinnaker" label="Balao" suffix="m2"                    readonly>
                            </v-text-field>
                        </v-flex>
                        <v-spacer></v-spacer>
                        <v-flex xs12 sm3>
                            <v-text-field v-model="editedItem.loa" label="Comp.Casco" suffix="m"                    readonly>
                            </v-text-field>

                            <v-text-field v-model="editedItem.draft" label="Alt.Casco" suffix="m"                    readonly>
                            </v-text-field>
                        </v-flex>
                        <v-spacer></v-spacer>
                        <v-flex xs12 sm3>

                            <v-text-field v-model="editedItem.spinnaker" label="Balao" suffix="m2"                    readonly>
                            </v-text-field>
                            <v-text-field v-model="editedItem.spinnaker" label="Balao" suffix="m2" v-mask="'a'" >
                            </v-text-field>
                        </v-flex>
                    </v-layout>
            </v-container>
            </v-form>

          </v-card-text>
        </v-window-item>

        <v-window-item :value="3">
          <div class="pa-3 text-xs-center">
            <v-img
              class="mb-3"
              contain
              height="128"
              src="https://cdn.vuetifyjs.com/images/logos/v.svg"
            ></v-img>
            <h3 class="title font-weight-light mb-2">ORC</h3>
            <span class="caption grey--text">Thanks for the Data!</span>
          </div>
        </v-window-item>
      </v-window>

      <v-divider></v-divider>

      <v-card-actions>
        <v-btn
          :disabled="step === 1"
          flat
          @click="step--"
        >
          Back
        </v-btn>
        <v-spacer></v-spacer>
        <v-btn
          :disabled="step === 3"
          color="primary"
          depressed
          @click="step++"
        >
          Next
        </v-btn>
      </v-card-actions>
    </v-card>
            </v-dialog>
        </v-toolbar>

        <v-card-title>
            <v-spacer></v-spacer>
            <v-text-field
            v-model="search"
            append-icon="search"
            label="Procurar"
            single-line
            hide-details
            ></v-text-field>
        </v-card-title>

<!-- tabela lista de barcos -->
        <v-data-table
            :headers="headers"
            :items="barcos"
            :search="search"
            :expand="expand"
            class="elevation-1"
        >
            <template slot="headerCell" slot-scope="props">
                <v-tooltip bottom>
                    <template v-slot:activator="{ on }">
                    <span v-on="on">
                        {{ props.header.text }}
                    </span>
                    </template>
                    <span>
                    {{ props.header.text }}
                    </span>
                </v-tooltip>
            </template>
            <template v-slot:items="props">
                <tr @click="props.expanded = !props.expanded">
                    <td>{{ props.item.name }}</td>
                    <td class="text-xs-left">{{ props.item.sailnumber}}</td>
                    <td class="text-xs-left">{{ props.item.type}}</td>
                    <td class="text-xs-left">{{ props.item.year}}</td>
                    <td class="text-xs-left">{{ props.item.gph}}</td>
                    <td class="justify-center layout px-0" v-if="userIsAuthenticated">
                        <v-icon
                            small
                            class="mr-2"
                            @click="editItem(props.item)"
                        >
                            edit
                        </v-icon>
                        <v-icon
                            small
                            @click="deleteItem(props.item)"
                        >
                            delete
                        </v-icon>
                    </td>
                </tr>
            </template>
            <template v-slot:no-results>
                <v-alert :value="true" color="error" icon="warning">
                Não foi possivel encontrar "{{ search }}".
                </v-alert>
        </template>
        <template v-slot:no-data>
          <v-btn color="primary" @click="initialize">Reset</v-btn>
        </template>
        <template v-slot:expand="props">
          <v-card flat>
            <v-card-text>
                    <v-layout row>
                        <v-flex xs2>
                            <h7 class="red--text">ID:</h7>
                        </v-flex>
                        <v-flex xs12>
                            <h7 class="red--text">{{ props.item.creatorid }}</h7>
                        </v-flex>
                    </v-layout>
                    <v-layout row>
                        <v-flex xs2>
                            <h7 class="red--text">Avatar:</h7>
                        </v-flex>
                        <v-flex xs12>
                            <h7 class="red--text">{{ props.item.creatorid }}</h7>
                        </v-flex>
                    </v-layout>
                    <v-layout row>
                        <v-flex xs2>
                        <h7 class="red--text">Nome:</h7>
                        </v-flex>
                        <v-flex xs12>
                            <h7 class="red--text">{{ props.item.creatorname }}</h7>
                        </v-flex>
                    </v-layout>
                    <v-layout>
                        <v-flex xs2>
                        <h7 class="red--text">Criado Em:</h7>
                        </v-flex>
                        <v-flex xs12>
                            <h7 class="red--text">{{ props.item.creatorname }}</h7>
                        </v-flex>
                    </v-layout>
            </v-card-text>
          </v-card>
        </template>
        </v-data-table>
    </v-layout>

<!-- fim-->
  </v-container>
</template>

<script>
export default {
  data: () => ({
    dialog: false,
    drawer: null,
    step: 1,
    expand: false,
    /* items: [
      {
        action: "directions_boat",
        title: "Barco",
        active: true,
        items: [{ action: "add", title: "Novo" }]
      },
      {
        action: "apps",
        title: "Output",
        active: true,
        items: [
          { action: "local_printshop", title: "Breakfast & Imprimir" },
          { action: "import_export", title: "Exportar" }
        ]
      },
      {
        action: "exit_to_app",
        title: "Sair",
        active: true
      }
    ], */
    items: [
      { icon: "directions_boat", text: "Barcos" },
      {
        icon: "keyboard_arrow_up",
        "icon-alt": "keyboard_arrow_down",
        text: "Novo Barco",
        model: false,
        children: [{ icon: "add", text: "Barco" }]
      },
      {
        icon: "keyboard_arrow_up",
        "icon-alt": "keyboard_arrow_down",
        text: "Output",
        model: false,
        children: [
          { text: "Exportar", icon: "import_export" },
          { text: "Imprimir", icon: "local_printshop" }
        ]
      },
      { icon: "exit_to_app", text: "Sair", link: "/barcos" }
    ],
    itemsClasses: ["ORC 0", "ORC 1", "ORC 2", "ORC 3", "ORC 4"],
    model: ["ORC 1"],
    searchClasses: "",
    headers: [
      { text: "Nome", value: "name", type: "text" },
      { text: "N. Vela", value: "sailnumber", type: "text", sortable: false },
      { text: "Modelo", value: "type", type: "text", sortable: false },
      { text: "Ano", value: "year", type: "number" },
      { text: "Rating", value: "gph", type: "number" },
      { text: "Accao", value: "accao", sortable: false }
    ],
    editedIndex: -1,
    editedItem: {
      name: "",
      country: "",
      sailnumber: "",
      builder: "",
      type: "",
      year: 2000,
      gph: 0,
      loa: 0,
      main: 0,
      genoa: 0,
      spinnaker: 0,
      crew: 0
    },
    defaultItem: {
      name: "",
      country: "",
      sailnumber: "",
      builder: "",
      type: "",
      year: 2000,
      gph: 0,
      loa: 0,
      main: 0,
      genoa: 0,
      spinnaker: 0,
      crew: 0
    }
  }),
  computed: {
    userIsAuthenticated() {
      return (
        this.$store.getters.user !== null &&
        this.$store.getters.user !== undefined
      );
    },
    formTitle() {
      return this.editedIndex === -1 ? "Novo Barco" : "Editar Barco";
    },
    barcos() {
      return this.$store.getters.loadedBarcos;
    },
    users() {
      return this.$store.getters.loadedUsers;
    },
    user() {
      return this.$store.state.user;
    },
    profilePicUrl() {
      return this.$store.getters.profilePicUrl;
    },
    error() {
      return this.$store.getters.error;
    },
    loading() {
      return this.$store.getters.loading;
    },
    currentTitle() {
      switch (this.step) {
        case 1:
          return "Medidas";
        case 2:
          return "Rating";
        default:
          return "Polares";
      }
    }
  },
  watch: {
    dialog(val) {
      val || this.close();
    },
    model(val) {
      if (val.length > 5) {
        this.$nextTick(() => this.model.pop());
      }
    }
  },
  created() {
    this.initialize();
  },
  methods: {
    initialize() {
      this.barcos = [
        {
          name: "",
          country: "",
          sailnumber: "",
          builder: "",
          type: "",
          year: 2000,
          gph: 0,
          loa: 0,
          main: 0,
          genoa: 0,
          spinnaker: 0,
          crew: 0
        }
      ];
    },
    editItem(item) {
      this.editedIndex = this.barcos.indexOf(item);
      this.editedItem = Object.assign({}, item);
      this.dialog = true;
    },
    deleteItem(item) {
      const index = this.barcos.indexOf(item);
      confirm("Tem a certeza que quer apagar este barco?") &&
        this.barcos.splice(index, 1);
    },
    close() {
      this.dialog = false;
      setTimeout(() => {
        this.editedItem = Object.assign({}, this.defaultItem);
        this.editedIndex = -1;
      }, 300);
    },
    save() {
      if (this.editedIndex > -1) {
        Object.assign(this.barcos[this.editedIndex], this.editedItem);
      } else {
        this.barcos.push(this.editedItem);

        this.onCreateBarco();
      }
      this.close();
    },
    onSair() {
      this.$router.push("/");
    },
    onCreateBarco() {
      const barcoData = {
        name: this.editedItem.name,
        country: this.editedItem.country,
        sailnumber: this.editedItem.sailnumber,
        builder: this.editedItem.builder,
        type: this.editedItem.type,
        year: this.editedItem.year,
        gph: this.editedItem.gph,
        loa: this.editedItem.loa,
        main: this.editedItem.main,
        genoa: this.editedItem.genoa,
        spinnaker: this.editedItem.spinnaker,
        crew: this.editedItem.crew
      };
      this.$store.dispatch("createBarco", barcoData);
      this.dialog = false;
      this.$router.push("/barcos");
    },
    onOne() {
      //alert("ONE");
      return "One";
    },
    onFour() {
      return "Four";
    }
  },
  props: {
    source: String
  }
};
</script>










store










import Vue from "vue";
import Vuex from "vuex";
import * as firebase from "firebase";

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    loadedImages: [
      {
        id: "000",
        src: "https://s3-eu-west-1.amazonaws.com/xanivouga/16.jpg",
        thumbnail: "https://s3-eu-west-1.amazonaws.com/xanivouga/16.jpg",
        caption: ""
      },
      {
        id: "111",
        src: "https://s3-eu-west-1.amazonaws.com/xanivouga/9.jpg",
        thumbnail: "https://s3-eu-west-1.amazonaws.com/xanivouga/9.jpg",
        caption: ""
      }
    ],
    loadedVideos: [
      {
        id: "00",
        src: "https://s3-eu-west-1.amazonaws.com/xanivouga/video/0.mp4",
        thumbnail: "https://s3-eu-west-1.amazonaws.com/xanivouga/video/0.mp4",
        caption: ""
      }
    ],
    loadedUsers: [
      {
        name: "xani",
        email: "xani@getnada.com",
        password: "123456",
        Id: ""
      },
      {
        name: "xico",
        email: "xico@getnada.com",
        password: "123456",
        Id: ""
      }
    ],
    loadedMeetups: [
      {
        imageurl:
          "http://www.52superseries.com/wp-content/gallery/2017-52-super-series-miami-royal-cup/170307_nm_52SS_1034.jpg",
        id: "afajfjadfaadfa323",
        title: "Baiona Marina",
        date: new Date().toISOString().slice(0, 10),
        location: "Baiona Manina",
        description: "Regata do Principe"
      },
      {
        imageurl:
          "http://www.52superseries.com/wp-content/gallery/2017-52-super-series-miami-royal-cup/170311_nm_52SS_7219.jpg",
        id: "aadsfhbkhlk1241",
        title: "Miami",
        date: new Date().toISOString().slice(0, 10),
        location: "Miami",
        description: "Miami Florida"
      }
    ],
    loadedBarcos: [
      {
        name: "PortocaroDos",
        country: "ESP",
        sailnumber: "ESP5015"
      },
      {
        name: "Metralha",
        country: "POR",
        sailnumber: "POR8175"
      }
    ],
    user: null,
    currentUser: null,
    loading: false,
    error: null
  },
  mutations: {
    setLoadedUsers(state, payload) {
      state.loadedUsers = payload;
    },
    setLoadedImages(state, payload) {
      state.loadedImages = payload;
    },
    setLoadedVideos(state, payload) {
      state.loadedVideos = payload;
    },
    setLoadedMeetups(state, payload) {
      state.loadedMeetups = payload;
    },
    setLoadedResultados(state, payload) {
      state.loadedResultados = payload;
    },
    setLoadedBarcos(state, payload) {
      state.loadedBarcos = payload;
    },
    setUser(state, payload) {
      state.user = payload;
    },
    setLoading(state, payload) {
      state.loading = payload;
    },
    setError(state, payload) {
      state.error = payload;
    },
    createBarco(state, payload) {
      state.loadedBarcos.push(payload);
    },
    createMeetup(state, payload) {
      state.loadedMeetups.push(payload);
    },
    createUsers(state, payload) {
      state.loadedUsers.push(payload);
    },
    createResultado(state, payload) {
      state.loadedResultados.push(payload);
    },
    clearError(state) {
      state.error = null;
    }
  },
  actions: {
    loadImages({ commit }) {
      commit("setLoading", true);
      const images = [];
      const base = parseInt(Math.random() * 12, 10) + 20;
      //alert(base);
      for (let i = 0; i < 40; i++) {
        images.push({
          id: i,
          src:
            "https://s3-eu-west-1.amazonaws.com/xanivouga/" +
            (base + i) +
            ".jpg",
          thumbnail:
            "https://s3-eu-west-1.amazonaws.com/xanivouga/" +
            (base + i) +
            ".jpg",
          caption: ""
        });
      }
      //Carrega a variavel images com as imagens da amazon s3
      commit("setLoadedImages", images);
      commit("setLoading", false);
    },
    loadVideos({ commit }) {
      commit("setLoading", true);
      const videos = [];
      //const base = parseInt(Math.random() * 12, 2) + 2;
      for (let i = 0; i < 6; i++) {
        videos.push({
          id: i,
          src:
            "https://s3-eu-west-1.amazonaws.com/xanivouga/video/" + i + ".mp4",
          thumbnail:
            "https://s3-eu-west-1.amazonaws.com/xanivouga/video/" + i + ".jpg",
          caption: "'i'"
        });
      }
      //Carrega a variavel videos com os videos da amazon s3
      commit("setLoadedVideos", videos);
      commit("setLoading", false);
    },
    loadMeetups({ commit }) {
      commit("setLoading", true);
      firebase
        .database()
        .ref("meetups")
        .once("value")
        .then(data => {
          const meetups = [];
          const obj = data.val();
          for (let key in obj) {
            meetups.push({
              id: key,
              title: obj[key].title,
              description: obj[key].description,
              classes: obj[key].classes,
              location: obj[key].location,
              imageurl: obj[key].imageurl,
              date: obj[key].date,
              dates: obj[key].dates,
              horainicio: obj[key].horainicio,
              creatorid: obj[key].creatorid,
              creatorname: obj[key].creatorname,
              creatoravatar: obj[key].creatoravatar,
              creatordate: obj[key].creatordate
            });
          }
          //Carrega a variavel meetups com os dados do firebase
          commit("setLoadedMeetups", meetups);
          commit("setLoading", false);
        })
        .catch(error => {
          console.log(error);
          commit("setLoading", false);
        });
    },
    loadResultados({ commit }) {
      commit("setLoading", true);
      firebase
        .database()
        .ref("resultados")
        .once("value")
        .then(data => {
          const resultados = [];
          const obj = data.val();
          for (let key in obj) {
            resultados.push({
              id: key,
              meettupsid: obj[key].meettupsid,
              posicao: obj[key].posicao,
              nacionalidade: obj[key].nacionalidade,
              club: obj[key].club,
              matricula: obj[key].matricula,
              barco: obj[key].barco,
              skipper: obj[key].skipper,
              tempofinal: obj[key].tempofinal,
              espacotempo: obj[key].espacotempo,
              corrigido: obj[key].corrigido,
              total: obj[key].total
            });
          }
          //Carrega a variavel meetups com os dados do firebase
          commit("setLoadedResultados", resultados);
          commit("setLoading", false);
        })
        .catch(error => {
          console.log(error);
          commit("setLoading", false);
        });
    },
    loadBarcos({ commit }) {
      commit("setLoading", true);
      firebase
        .database()
        .ref("barcos")
        .once("value")
        .then(data => {
          const barcos = [];
          const obj = data.val();
          for (let key in obj) {
            barcos.push({
              id: key,
              name: obj[key].name,
              country: obj[key].country,
              sailnumber: obj[key].sailnumber,
              builder: obj[key].builder,
              type: obj[key].type,
              year: obj[key].year,
              gph: obj[key].gph,
              loa: obj[key].loa,
              main: obj[key].main,
              genoa: obj[key].genoa,
              spinnaker: obj[key].spinnaker,
              crew: obj[key].crew,
              creatorid: obj[key].creatorid,
              creatorname: obj[key].creatorname
            });
          }
          //Carrega a variavel meetups com os dados do firebase
          commit("setLoadedBarcos", barcos);
          commit("setLoading", false);
        })
        .catch(error => {
          console.log(error);
          commit("setLoading", false);
        });
    },
    createBarco({ commit, getters }, payload) {
      const barco = {
        name: payload.name,
        country: payload.country,
        sailnumber: payload.matricula,
        builder: payload.builder,
        type: payload.type,
        year: payload.year,
        gph: payload.gph,
        loa: payload.loa,
        main: payload.main,
        genoa: payload.genoa,
        spinnaker: payload.spinnaker,
        crew: payload.crew,
        creatorid: getters.user.id,
        creatorname: getters.currentUserName
      };
      //      alert("DENTRO " + barco.classe);
      firebase
        .database()
        .ref("barcos")
        .push(barco)
        .then(data => {
          const key = data.key;
          commit("createBarco", {
            ...barco,
            id: key
          });
        })
        .catch(error => {
          console.log(error);
        });
    },
    createMeetup({ commit, getters }, payload) {
      const meetup = {
        title: payload.title,
        location: payload.location,
        imageurl: payload.imageurl,
        description: payload.description,
        date: payload.date,
        dates: payload.dates,
        horainicio: payload.horainicio,
        classes: payload.classes,
        creatorid: getters.user.id,
        creatorname: getters.currentUserName,
        creatoravatar: getters.profilePicUrl,
        creatordate: payload.creatordate
      };
      firebase
        .database()
        .ref("meetups")
        .push(meetup)
        .then(data => {
          const key = data.key;
          commit("createMeetup", {
            ...meetup,
            id: key
          });
        })
        .catch(error => {
          console.log(error);
        });
      // Reach out to firebase and store it
    },
    loadUsers({ commit }) {
      commit("setLoading", true);
      firebase
        .database()
        .ref("users")
        .once("value")
        .then(data => {
          const users = [];
          const obj = data.val();
          for (let key in obj) {
            users.push({
              id: key,
              name: obj[key].name,
              email: obj[key].email,
              password: obj[key].password,
              creatorid: obj[key].creatorid
            });
          }
          //Carrega a variavel users com os dados do firebase
          commit("setLoadedUsers", users);
          commit("setLoading", false);
        })
        .catch(error => {
          console.log(error);
          commit("setLoading", false);
        });
    },
    createUsers({ commit, getters }, payload) {
      const users = {
        name: payload.name,
        email: payload.email,
        password: payload.password,
        id: getters.user.id
      };
      firebase
        .database()
        .ref("users")
        .push(users)
        .then(data => {
          const key = data.key;
          //chama a mutation createUsers
          commit("createUsers", {
            ...users,
            id: key
          });
        })
        .catch(error => {
          console.log(error);
        });
      // Reach out to firebase and store it
    },
    signUserUp({ commit }, payload) {
      commit("setLoading", true);
      commit("clearError");
      firebase
        .auth()
        .createUserWithEmailAndPassword(payload.email, payload.password)
        .then(user => {
          commit("setLoading", false);
          const newUser = {
            id: user.uid
          };
          commit("setUser", newUser);
        })
        .catch(error => {
          commit("setLoading", false);
          commit("setError", error);
          console.log(error);
        });
    },
    signUserIn({ commit }, payload) {
      commit("setLoading", true);
      commit("clearError");
      firebase
        .auth()
        .signInWithEmailAndPassword(payload.email, payload.password)
        .then(user => {
          commit("setLoading", false);
          const newUser = {
            id: user.uid
          };
          commit("setUser", newUser);
        })
        .catch(error => {
          commit("setLoading", false);
          commit("setError", error);
          console.log(error);
        });
    },
    signUserInGoogle({ commit }) {
      commit("setLoading", true);
      commit("clearError");
      firebase
        .auth()
        .signInWithPopup(new firebase.auth.GoogleAuthProvider())
        .then(user => {
          commit("setLoading", false);
          const newUser = {
            id: user.uid,
            name: user.displayName,
            email: user.email,
            photoUrl: user.photoURL,
            registeredMeetups: ["Google"]
          };
          commit("setUser", newUser);
        })
        .catch(error => {
          commit("setLoading", false);
          commit("setError", error);
          console.log(error);
        });
    },
    signUserInFacebook({ commit }) {
      commit("setLoading", true);
      commit("clearError");
      firebase
        .auth()
        .signInWithPopup(new firebase.auth.FacebookAuthProvider())
        .then(user => {
          commit("setLoading", false);
          const newUser = {
            id: user.uid,
            name: user.displayName,
            email: user.email,
            photoUrl: user.photoURL,
            registeredMeetups: ["Facebook"]
          };
          commit("setUser", newUser);
        })
        .catch(error => {
          commit("setLoading", false);
          commit("setError", error);
          console.log(error);
        });
    },
    signUserInTwitter({ commit }) {
      commit("setLoading", true);
      commit("clearError");
      firebase
        .auth()
        .signInWithPopup(new firebase.auth.TwitterAuthProvider())
        .then(user => {
          commit("setLoading", false);
          const newUser = {
            id: user.uid,
            name: user.displayName,
            email: user.email,
            photoUrl: user.photoURL
          };
          commit("setUser", newUser);
        })
        .catch(error => {
          commit("setLoading", false);
          commit("setError", error);
          console.log(error);
        });
    },
    autoSignIn({ commit }, payload) {
      commit("setUser", {
        id: payload.uid
      });
    },
    logout({ commit }) {
      firebase.auth().signOut();
      commit("setUser", null);
    },
    clearError({ commit }) {
      commit("clearError");
    }
  },
  getters: {
    loadedImages(state) {
      return state.loadedImages.sort((imagesA, imagesB) => {
        return imagesA.date > imagesB.date;
      });
    },
    featuredImages(state, getters) {
      return getters.loadedImages.slice(0, 46);
    },
    loadedImage(state) {
      return imageId => {
        return state.loadedImages.find(image => {
          return image.id === imageId;
        });
      };
    },
    loadedVideos(state) {
      return state.loadedVideos.sort((videosA, videosB) => {
        return videosA.date > videosB.date;
      });
    },
    featuredVideos(state, getters) {
      return getters.loadedVideos.slice(0, 6);
    },
    loadedVideo(state) {
      return videoId => {
        return state.loadedVideos.find(video => {
          return video.id === videoId;
        });
      };
    },
    loadedUsers(state) {
      return state.loadedUsers.sort((usersA, usersB) => {
        return usersA.date > usersB.date;
      });
    },
    featuredUsers(state, getters) {
      return getters.loadedUsers.slice(0, 5);
    },
    loadedMeetups(state) {
      return state.loadedMeetups.sort((a, b) => {
        return a.date > b.date;
      });
    },
    featuredMeetups(state, getters) {
      return getters.loadedMeetups.slice(0, 5);
    },
    loadedMeetup(state) {
      return meetupId => {
        return state.loadedMeetups.find(meetup => {
          //alert("id " + meetup.id + " - " + meetupId);
          return meetup.id === meetupId;
        });
      };
    },
    loadedResultados(state) {
      return state.loadedResultados.sort((resultadoA, resultadoB) => {
        return resultadoA.date > resultadoB.date;
      });
    },
    featuredResultados(state, getters) {
      return getters.loadedResultados.slice(0, 2);
    },
    loadedResultado(state) {
      return resultadoId => {
        return state.loadedResultados.find(resultado => {
          /*  alert("id " + resultado.id + " - " + resultadoId);
          alert(
            "meetupID " + resultado.meetupid + " barco: " + resultado.barco
          );*/
          //alert("resultadoId " + resultadoId);
          return resultado.id === resultadoId;
        });
      };
    },
    loadedBarcos(state) {
      return state.loadedBarcos.sort((barcoA, barcoB) => {
        return barcoA.date > barcoB.date;
      });
    },
    featuredBarcos(state, getters) {
      return getters.loadedBarcos.slice(0, 25);
    },
    loadedBarco(state) {
      return barcoId => {
        return state.loadedBarcos.find(barco => {
          alert("id " + barco.id + " - " + barcoId);
          return barco.id === barcoId;
        });
      };
    },
    user(state) {
      return state.user;
    },
    loading(state) {
      return state.loading;
    },
    error(state) {
      return state.error;
    },
    currentUserName() {
      return firebase.auth().currentUser.displayName;
    },
    profilePicUrl() {
      return firebase.auth().currentUser.photoURL || "/profile.png";
    }
  }
});
